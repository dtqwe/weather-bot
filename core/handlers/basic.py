from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
import core.keyboards.reply as kb
import aiohttp

from core.utils.utils import weather_descriptions_russian, precipitation_probabilities_russian

owm_api_key = '471a41a84c5d5aa8b0ad5864e45eaa3f'

router = Router()
    
@router.message(F.text == '/start')
async def on_start(message: Message):
    await message.answer(f'üëã –ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ üå¶Ô∏è <b>–ø–æ–≥–æ–¥–µ</b>. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help.', parse_mode='HTML')

@router.message(F.text == '/help')
async def on_help(message: Message):
    await message.answer('<b>–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /weather –≥–æ—Ä–æ–¥ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —É–¥–æ–±–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º —Å –≤—ã–±–æ—Ä–æ–º, –Ω–∞–±—Ä–∞–≤ –∫–æ–º–∞–Ω–¥—É /wt.</b>', parse_mode='HTML')

@router.message(F.text == '/wt')
async def wt(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω—É –Ω–∏–∂–µ:', reply_markup=kb.main)

# ------------------------------- RUSSIA ------------------------------------
@router.message(F.text == 'üá∑üá∫–†–æ—Å—Å–∏—è')
async def wt_ru(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥:', reply_markup=kb.cityOfRu)

@router.callback_query(F.data == 'moscow')
async def moscow(callback: CallbackQuery):
    await handle_weather_callback(callback, '–ú–æ—Å–∫–≤–∞')

@router.callback_query(F.data == 'piter')
async def piter(callback: CallbackQuery):
    await handle_weather_callback(callback, '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥')

@router.callback_query(F.data == 'kazan')
async def kazan(callback: CallbackQuery):
    await handle_weather_callback(callback, '–ö–∞–∑–∞–Ω—å')

@router.callback_query(F.data == 'omsk')
async def omsk(callback: CallbackQuery):
    await handle_weather_callback(callback, '–û–º—Å–∫')

@router.callback_query(F.data == 'backToMainfromRu')
async def backToMainfromRu(callback: CallbackQuery):
    await callback.answer('–ù–∞–∑–∞–¥')
    await callback.message.answer('–ù–∞–∑–∞–¥', reply_markup=kb.main)
# ------------------------------------ END RUSSIA ---------------------------

# ------------------------------------ KAZAKHSTAN ---------------------------
@router.message(F.text == 'üá∞üáø–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω')
async def wt_kz(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥:', reply_markup=kb.cityOfKz)

@router.callback_query(F.data == 'astana')
async def astana(callback: CallbackQuery):
    await handle_weather_callback(callback, '–ê—Å—Ç–∞–Ω–∞')

@router.callback_query(F.data == 'almaty')
async def almaty(callback: CallbackQuery):
    await handle_weather_callback(callback, '–ê–ª–º–∞—Ç—ã')

@router.callback_query(F.data == 'petro')
async def petro(callback: CallbackQuery):
    await handle_weather_callback(callback, '–ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫')

@router.callback_query(F.data == 'aktobe')
async def aktobe(callback: CallbackQuery):
    await handle_weather_callback(callback, '–ê–∫—Ç–æ–±–µ')

@router.callback_query(F.data == 'backToMainfromKz')
async def backToMainfromKz(callback: CallbackQuery):
    await callback.answer('–ù–∞–∑–∞–¥')
    await callback.message.answer('–ù–∞–∑–∞–¥', reply_markup=kb.main)
# ------------------------------------ END KAZAKHSTAN -----------------------

# ------------------------------------ Ukraine ------------------------------
@router.message(F.text == 'üá∫üá¶–£–∫—Ä–∞–∏–Ω–∞')
async def wt_ua(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥:', reply_markup=kb.cityOfUa)

@router.callback_query(F.data == 'kiev')
async def kiev(callback: CallbackQuery):
    await handle_weather_callback(callback, '–ö–∏–µ–≤')

@router.callback_query(F.data == 'odessa')
async def odessa(callback: CallbackQuery):
    await handle_weather_callback(callback, '–û–¥–µ—Å—Å–∞')

@router.callback_query(F.data == 'lvov')
async def lvov(callback: CallbackQuery):
    await handle_weather_callback(callback, '–õ—å–≤–æ–≤')

@router.callback_query(F.data == 'dnepr')
async def dnepr(callback: CallbackQuery):
    await handle_weather_callback(callback, '–î–Ω–µ–ø—Ä')

@router.callback_query(F.data == 'backToMainfromUa')
async def backToMainfromUa(callback: CallbackQuery):
    await callback.answer('–ù–∞–∑–∞–¥')
    await callback.message.answer('–ù–∞–∑–∞–¥', reply_markup=kb.main)
# ------------------------------------ END UKRAINE --------------------------

# ------------------------------------ BELARUS ---------------------------
@router.message(F.text == 'üáßüáæ–ë–µ–ª–∞—Ä—É—Å—å')
async def wt_by(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥:', reply_markup=kb.cityOfBy)

@router.callback_query(F.data == 'minsk')
async def minsk(callback: CallbackQuery):
    await handle_weather_callback(callback, '–ú–∏–Ω—Å–∫')

@router.callback_query(F.data == 'gomel')
async def gomel(callback: CallbackQuery):
    await handle_weather_callback(callback, '–ì–æ–º–µ–ª—å')

@router.callback_query(F.data == 'vitebsk')
async def vitebsk(callback: CallbackQuery):
    await handle_weather_callback(callback, '–í–∏—Ç–µ–±—Å–∫')

@router.callback_query(F.data == 'brest')
async def brest(callback: CallbackQuery):
    await handle_weather_callback(callback, '–ë—Ä–µ—Å—Ç')

@router.callback_query(F.data == 'backToMainfromBy')
async def backToMainfromBy(callback: CallbackQuery):
    await callback.answer('–ù–∞–∑–∞–¥')
    await callback.message.answer('–ù–∞–∑–∞–¥', reply_markup=kb.main)
# ------------------------------------ END BELARUS -----------------------


@router.message(F.text.startswith('/weather'))
async def get_weather(message: Message):
    try:
        city = message.text.split(' ', 1)[1]
        weather_info = await get_weather_details(city)
        if weather_info:
            temperature = weather_info['temperature']
            min_temperature = weather_info['min_temperature']
            max_temperature = weather_info['max_temperature']
            humidity = weather_info['humidity']
            wind_speed = weather_info['wind_speed']
            weather_description = weather_info['weather_description']
            precipitation_probability = weather_info['precipitation_probability']

            weather_text = f'–ü–æ–≥–æ–¥–∞ –≤  üèôÔ∏è {city}:\n'
            weather_text += f'–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: üå°Ô∏è {temperature}¬∞C\n'
            weather_text += f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {"‚ùÑÔ∏è" if min_temperature <= 0 else "‚òÄÔ∏è"} {min_temperature}¬∞C\n'
            weather_text += f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {"‚òÄÔ∏è" if max_temperature >= 0 else "‚ùÑÔ∏è"} {max_temperature}¬∞C\n'
            weather_text += f'–í–ª–∞–∂–Ω–æ—Å—Ç—å: üíß {humidity}%\n'
            weather_text += f'–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: üå¨Ô∏è {wind_speed} –º/—Å\n'
            weather_text += f'–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã: {weather_description}\n'
            weather_text += f'–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: üåÇ {precipitation_probability}\n'

            await message.answer(weather_text)
        else:
            await message.answer('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
    except IndexError:
        await message.answer('–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –≥–æ—Ä–æ–¥!')

async def handle_weather_callback(callback: CallbackQuery, city_name):
    await callback.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ {city_name}')
    city = city_name
    weather_info = await get_weather_details(city)

    if weather_info:
        temperature = weather_info['temperature']
        min_temperature = weather_info['min_temperature']
        max_temperature = weather_info['max_temperature']
        humidity = weather_info['humidity']
        wind_speed = weather_info['wind_speed']
        weather_description = weather_info['weather_description']
        precipitation_probability = weather_info['precipitation_probability']

        weather_text = f'–ü–æ–≥–æ–¥–∞ –≤  üèôÔ∏è {city}:\n'
        weather_text += f'–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: üå°Ô∏è {temperature}¬∞C\n'
        weather_text += f'–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {"‚ùÑÔ∏è" if min_temperature <= 0 else "‚òÄÔ∏è"} {min_temperature}¬∞C\n'
        weather_text += f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {"‚òÄÔ∏è" if max_temperature >= 0 else "‚ùÑÔ∏è"} {max_temperature}¬∞C\n'
        weather_text += f'–í–ª–∞–∂–Ω–æ—Å—Ç—å: üíß {humidity}%\n'
        weather_text += f'–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: üå¨Ô∏è {wind_speed} –º/—Å\n'
        weather_text += f'–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã: {weather_description}\n'
        weather_text += f'–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: üåÇ {precipitation_probability}\n'

        await callback.message.answer(weather_text, reply_markup=None)
    else:
        await callback.message.answer('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', reply_markup=None)


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ
async def get_weather_details(city):
    async with aiohttp.ClientSession() as session:
        url = f'http://api.openweathermap.org/data/2.5/weather?q={city}&appid={owm_api_key}&units=metric'
        async with session.get(url) as response:
            data = await response.json()
            if data.get('main') and data['main'].get('temp'):
                temperature = data['main']['temp']
                min_temperature = data['main']['temp_min']
                max_temperature = data['main']['temp_max']
                humidity = data['main']['humidity']
                wind_speed = data['wind']['speed']

                weather_description = weather_descriptions_russian.get(data['weather'][0]['description'], '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
                precipitation_probability = precipitation_probabilities_russian.get(data.get('pop', 'N/A'), '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')

                return {
                    'temperature': round(temperature),
                    'min_temperature': round(min_temperature),
                    'max_temperature': round(max_temperature),
                    'humidity': humidity,
                    'wind_speed': wind_speed,
                    'weather_description': weather_description,
                    'precipitation_probability': precipitation_probability
                }
            else:
                return None  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–≥–æ–¥–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞